security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        admin:
            memory:
                users:
                    admin@admin.com:
                        password: '$2y$13$WYrZkIUbUKIKAbabgp0WxOfcvRiTC3IB.ebs8RQB.jK3U9fPA1pMe'
                        roles: [ 'ROLE_SUPER_ADMIN' ]
        users:
            id: App\Security\UserProvider
        
        all_users:
            chain:
                providers: [ 'admin', 'users' ]
        # used to reload user from session & other features (e.g. switch_user)
        # app_user_provider:
        #    id: App\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern: /
            lazy: true
            provider: all_users
            form_login:
                provider: all_users
                login_path: /login
                check_path: /login
                username_parameter: email
                password_parameter: password
            logout: true
            entry_point: App\Security\AppAuthenticator
            custom_authenticator: App\Security\AppAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, role: PUBLIC_ACCESS }
        - { path: ^/register, role: PUBLIC_ACCESS }
        - { path: ^/admin, role: ROLE_SUPER_ADMIN }
        - { path: ^/, role: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
